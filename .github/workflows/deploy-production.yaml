name: Deploy Production

on:
  push:
    branches: [main]

env:
  cr_server: 445789524075.dkr.ecr.us-east-1.amazonaws.com

jobs:
  migrate-database:
    name: Migrate Database
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [15.x]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run Migrations
        run: |
          npm ci
          npm run prisma:migrate:up
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  publish-container:
    name: Publish Container
    runs-on: ubuntu-latest
    needs: migrate-database
    steps:
      - uses: actions/checkout@v2

      - name: Prepare Container
        id: prepare
        run: |
          URI=${{ env.cr_server }}/pokernook/graph
          TAG="${URI}:sha-${GITHUB_SHA::8}"
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - uses: docker/setup-buildx-action@v1

      - uses: docker/login-action@v1
        with:
          registry: ${{ env.cr_server }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.prepare.outputs.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.prepare.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task
        with:
          task-definition: .aws/ecs-task-definition.json
          container-name: graph
          image: ${{ steps.prepare.outputs.tag }}

      - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          cluster: pokernook
          service: graph
          wait-for-service-stability: true
