name: Serverless

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_SECRET: ${{ secrets.APP_SECRET }}

jobs:
  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_PREVIEW_URL }}
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build Deployment
        run: |
          docker build -t pkg -f .docker/package.dockerfile .
          docker create --name pkg-instance pkg
          docker cp pkg-instance:/app/.build ./.build

      - name: Set Stage
        run: echo "DEPLOY_STAGE=$(sh .github/scripts/ref-to-serverless-stage.sh ${{ github.head_ref }})" >> $GITHUB_ENV

      - name: Deploy Function
        run: npx serverless deploy --stage ${{ env.DEPLOY_STAGE }}

      - name: Migrate & Seed
        run: npm run db:migrate:up && npm run db:seed

      - name: Get Deployment Info
        run: echo "SLS_INFO=$(npx serverless info --stage ${{ env.DEPLOY_STAGE }} | grep http)" >> $GITHUB_ENV

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@1.0.0
        with:
          message: |
            **Endpoints:**
            ```bash
            ${{ env.SLS_INFO }}
            ```
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  remove-preview:
    name: Remove Preview
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Set Stage
        run: echo "DEPLOY_STAGE=$(sh .github/scripts/ref-to-serverless-stage.sh ${{ github.head_ref }})" >> $GITHUB_ENV

      - name: Remove Function
        run: npx serverless remove --stage ${{ env.DEPLOY_STAGE }}

  deploy-prod:
    name: Deploy Prod
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build Deployment
        run: |
          docker build -t pkg -f .docker/package.dockerfile .
          docker create --name pkg-instance pkg
          docker cp pkg-instance:/app/.build ./.build

      - name: Deploy Function
        env:
          NODE_ENV: production
        run: npx serverless deploy --stage prod

      - name: Migrate
        run: npm run db:migrate:up
