### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Mutation {
  userDeleteAccount: UserPayload
  userLogIn(email: String!, password: String!): UserPayload
  userLogOut: UserLogOutPayload
  userSignUp(email: String!, password: String!, username: String!): UserPayload
  userUpdateEmail(newEmail: String!): UserPayload
  userUpdatePassword(currentPassword: String!, newPassword: String!): UserPayload
  userUpdateUsername(newUsername: String!): UserPayload
}

type Query {
  me: User
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
}

type User {
  createdAt: DateTime!
  discriminator: Int!
  email: String!
  emailVerified: Boolean!
  id: String!
  username: String!
}

type UserLogOutPayload {
  sessionId: String
}

type UserPayload {
  user: User
}

input UserTagCompoundUniqueInput {
  discriminator: Int!
  username: String!
}

input UserWhereUniqueInput {
  Tag: UserTagCompoundUniqueInput
  email: String
  id: String
}
